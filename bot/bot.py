import os
from dotenv import load_dotenv
from aiogram import Bot,Dispatcher
from aiogram.types import Message
from aiogram.utils import executor
import requests
from aiogram.types import ReplyKeyboardMarkup,KeyboardButton
from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
load_dotenv()

TOKEN= os.environ.get("TOKEN")

bot =Bot(token=TOKEN)
dp=Dispatcher(bot,storage=MemoryStorage())
req_ip="http://192.168.31.212:8001/"


keyboard_unsub = ReplyKeyboardMarkup(resize_keyboard=True)
keyboard_unsub.add("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
keyboard_unsub.add("–†–∞—Å—Å—ã–ª–∫–∞")
keyboard_unsub.add("–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
keyboard_unsub.add("–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")



keyboard_sub= ReplyKeyboardMarkup(resize_keyboard=True)
keyboard_sub.add(KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",request_contact=True))
keyboard_sub.add("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
keyboard_sub.add("–†–∞—Å—Å—ã–ª–∫–∞")
keyboard_sub.add("–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
keyboard_sub.add("–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")



class Newsletter(StatesGroup):
    state1=State()



@dp.message_handler(commands="start")
async def start_command(message:Message):

    await message.answer("–ü—Ä–∏–≤–µ—Ç",reply_markup=keyboard_sub)




@dp.message_handler(lambda message: message.text=="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
async def keyboard(message:Message):

    user_id=message.from_user.id
    data={
        "user_id": user_id,
        "is_active": True

         }
    check_user=requests.get(f"{req_ip}/telegram/telegramuser/?user_id={user_id}").json()
    check_sub=requests.get(f"{req_ip}/telegram/user/?user__user_id={user_id}").json()

    if not check_user:
        return await message.answer("–¢–µ–±—è –Ω–µ—Ç –≤ –±–∞–∑–µ –Ω–∞–∂–º–∏ –Ω–∞ /start —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")

    if check_sub:
        return await message.answer("–¢—ã –µ—Å—Ç—å –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö",reply_markup=keyboard_unsub)
    
    req=requests.post(f"{req_ip}/telegram/user/",data=data)
    if req.status_code ==201:
        await message.answer("–ü—Ä–∏–≤–µ—Ç —Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è",reply_markup=keyboard_unsub)
    else:
        await message.answer("error")




@dp.message_handler(lambda message: message.text=="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
async def keyboard(message:Message):

    user_id=message.from_user.id

    check_user=requests.get(f"{req_ip}/telegram/user/?user__user_id={user_id}").json()
    if not check_user:
        return await message.answer("–¢—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è")
    
    delete_id=check_user[0]["id"]
    delete_sub=requests.delete(f"{req_ip}/telegram/user/{delete_id}/")
    if delete_sub.status_code==204:
        await message.answer("–¢—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª—Å—è",reply_markup=keyboard_sub)
    else:
        await message.answer("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
    



@dp.message_handler(lambda message: message.text=="–†–∞—Å—Å—ã–ª–∫–∞")
async def keyboard(message:Message):
    
    await Newsletter.state1.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")




@dp.message_handler(state=Newsletter.state1)
async def letter(message:Message,state:FSMContext):

    if message.from_user.id == 6619761521:
        async with state.proxy()as data:
            text=data["state1"]=message.text
        check_user=requests.get(f"{req_ip}/telegram/user_true/").json()
        successfully=0
        fail=0
        for check in check_user:
            try:
                await bot.send_message(check["user_id"], text=text)
                successfully+=1
            except Exception:
                fail+=1
                continue
        await message.answer(f'–î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Å—ã–ª–∫–∏\n–¢–µ–∫—Å—Ç: {text}\n‚úÖ–£—Å–ø–µ—à–Ω–æ: {successfully}\n‚ùå–û—à–∏–±–∫–∏: {fail}\n–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞üîî',reply_markup=keyboard_unsub)
        await state.finish()
    
    else:
        await message.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏")





@dp.message_handler(lambda message: message.text=="–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def keyboard(message:Message):

    user_id=message.from_user.id

    check_user=requests.get(f"{req_ip}/telegram/user/?user__user_id={user_id}").json()
    if not check_user:
        return await message.answer("–¢—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è")
    id_sub=check_user[0]["id"]
    patch_sub=requests.patch(f"{req_ip}/telegram/user/{id_sub}/",data={"is_active": False})
    if patch_sub.status_code ==200:
        await message.answer("–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É")
    else:
        await message.answer("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")



@dp.message_handler(lambda message: message.text=="–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def keyboard(message:Message):

    user_id=message.from_user.id

    check_user=requests.get(f"{req_ip}/telegram/user/?user__user_id={user_id}").json()
    if not check_user:
        return await message.answer("–¢–µ–±—è –Ω–µ—Ç –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö")
    id_sub=check_user[0]["id"]
    patch_sub=requests.patch(f"{req_ip}/telegram/user/{id_sub}/",data={"is_active": True})
    if patch_sub.status_code ==200:
        await message.answer("–í—ã –≤–∫–ª—é—á–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É")
    else:
        await message.answer("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")



@dp.message_handler(content_types=types.ContentType.CONTACT)
async def process_contact(message: Message):
    contact=message.contact.phone_number

    user_id=message.from_user.id
    data={
        "nickname": message.from_user.first_name,
        "user_id":user_id,
        "phone": contact
         }
    
    
    check_user=requests.get(f"{req_ip}/telegram/telegramuser/?user_id={user_id}").json()
    if check_user:
        return await message.answer("–ü—Ä–∏–≤–µ—Ç —Ç—ã –µ—Å—Ç—å –≤ –±–∞–∑–µ",reply_markup=keyboard_sub)
    
    req=requests.post(f"{req_ip}/telegram/telegramuser/",data=data)
    if req.status_code ==201:
        await message.answer("–ü—Ä–∏–≤–µ—Ç —Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",reply_markup=keyboard_sub)
    else:
        await message.answer("error")
    


if __name__=="__main__":  
    executor.start_polling(dp,skip_updates=True)




    
        

